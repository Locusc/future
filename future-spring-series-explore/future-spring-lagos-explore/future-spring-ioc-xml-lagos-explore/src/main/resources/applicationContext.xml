<?xml version="1.0" encoding="UTF-8" ?>
<!-- 根标签beans, 里面配置一个又一个的bean子标签, 每一个bean子标签都代表一个类的配置-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans.xsd"
>
    <!--
        scope: 定义bean的作用范围
            singleton: 单例, IOC容器中只有一个该类对象, 默认为singleton
            prototype: 原型(多例), 每次使用该类的对象(getBean), 都返回给你一个新的对象
                       Spring只创建对象, 不管理对象
    -->
    <!--  id标识对象, class是类的全限定类名  -->
    <bean id="accountDao" class="JdbcAccountDaoImpl"
        scope="singleton" init-method="init" destroy-method="destroy">
        <!--  set方法注入使用property标签, 如果注入的是另外一个bean那么使用ref属性
              如果注入的是普通值那么使用的是value属性  -->
        <!--  <property name="ConnectionUtils" ref="connectionUtils"/>  -->
        <!--  <property name="name" value="张三"/>  -->

        <!--  构造器注入-index按照参数索引位置注入  -->
        <!--  <constructor-arg index="0" ref="connectionUtils"/>
        <constructor-arg index="1" value="张三"/>  -->
        <!--  构造器注入-name按照参数名称注入  -->
        <constructor-arg name="connectionUtils" ref="connectionUtils"/>
        <constructor-arg name="name" value="张三"/>

        <!--  set注入复杂数据类型, 同时数据形式相同时会自动转换 比如<array>直接用在<set>
                <map>直接用在<props>-->
        <property name="myArray" >
            <array>
                <value>arr1</value>
                <value>arr2</value>
                <value>arr3</value>
            </array>
        </property>

        <property name="myMap">
            <map>
                <entry key="key1" value="value1"/>
                <entry key="key2" value="value2"/>
            </map>
        </property>

        <property name="mySet">
            <set>
                <value>set1</value>
                <value>set2</value>
            </set>
        </property>

        <property name="myProperties">
            <props>
                <prop key="prop1">value1</prop>
                <prop key="prop2">value2</prop>
            </props>
        </property>
    </bean>

    <bean id="transferService" class="TransferServiceImpl">
        <!--  set+name 之后锁定到传值的set方法, 通过反射技术可以调用该方法传入对应的值  -->
        <property name="AccountDao" ref="accountDao"/>
    </bean>

    <!--  事务管理器  -->
    <bean id="transactionManager" class="TransactionManager">
        <property name="ConnectionUtils" ref="connectionUtils"/>
    </bean>

    <!--  代理对象工厂  -->
    <bean id="proxyFactory" class="ProxyFactory">
        <property name="TransactionManager" ref="transactionManager"/>
    </bean>

    <!--  Spring ioc实例化Bean的三种方式  -->
    <!--  方式一: 使用无参构造器(推荐)  -->
    <!--  <bean id="connectionUtils" class="ConnectionUtils"></bean>-->

    <!--  另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理  -->
    <!--  方式二: 静态方法  -->
    <bean id="connectionUtils" class="CreateBeanFactory"
          factory-method="getInstanceStatic">
    </bean>
    <!--  方式三: 实例化方法  -->
<!--    <bean id="createBeanFactory" class="CreateBeanFactory"/>-->
<!--    <bean id="connectionUtils" factory-bean="createBeanFactory"-->
<!--          factory-method="getInstance">-->
<!--    </bean>-->
</beans>